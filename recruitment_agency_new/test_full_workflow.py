"""Test file for the full recruitment agency workflow."""

import sys
import os
from pathlib import Path
import json
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Add the project root to Python path
project_root = str(Path(__file__).parent)
if project_root not in sys.path:
    sys.path.append(project_root)
print("Current working directory:", os.getcwd())
print("Python path:", sys.path)
print("Adding to Python path:", project_root)

print("\nImporting tools...")
try:
    from job_prospector.tools import JobSearcher, JobAnalyzer
    from content_writer.tools import ResumeEditor, CoverLetterEditor
    from email_sender.tools import EmailSender
    print("Imports successful")
except Exception as e:
    print("Error importing tools:", str(e))
    print("Traceback:", str(e.__traceback__))
    sys.exit(1)

def test_full_workflow():
    """Test the full recruitment agency workflow."""
    print("Starting full workflow test...")
    
    # Set up search queries for different roles and locations
    search_queries = [
        {"role": "internal communications manager", "location": "Seattle, WA"},
        {"role": "communications director", "location": "Seattle, WA"},
        {"role": "corporate communications", "location": "Seattle, WA"},
        {"role": "PR manager", "location": "Seattle, WA"},
        {"role": "communications strategist", "location": "Seattle, WA"}
    ]
    
    # Initialize job searcher with multiple queries and filters
    searcher = JobSearcher(
        search_queries=search_queries,
        max_distance=25,
        num_pages=1,
        date_posted="month",
        employment_types=["FULLTIME"],
        min_salary=80000
    )
    
    # Execute job search
    print("\nExecuting job search...")
    search_results = json.loads(searcher.run())
    
    if search_results["status"] == "success":
        print(f"Found {search_results['jobs_found']} jobs across {search_results['total_searches']} searches")
        print(f"Results saved to: {search_results['results_file']}")
        
        # Process each job that meets the criteria
        for job in search_results["jobs"]:
            print(f"\nAnalyzing job: {job['title']} at {job['company']}")
            
            # Initialize job analyzer
            analyzer = JobAnalyzer(
                job_title=job["title"],
                company_name=job["company"],
                job_description=job["description"]
            )
            
            # Analyze job requirements
            analysis_data = analyzer.run()
            match_score = analysis_data["match_score"]
            
            print(f"Match Score: {match_score}")
            print("Matching Skills:", ", ".join(analysis_data["matching_skills"]))
            print("Key Requirements:", ", ".join(analysis_data["key_requirements"]))
            
            # If match score is above threshold, proceed with application
            if match_score >= 50:
                print(f"\nPreparing application for {job['title']} at {job['company']}")
                
                # Get project root for template path
                project_root = str(Path(__file__).parent)
                template_path = os.path.join(project_root, "templates", "luke_templates.json")
                
                # Customize resume
                resume_editor = ResumeEditor(
                    template_path=template_path,
                    job_title=job["title"],
                    company_name=job["company"],
                    key_requirements=analysis_data["key_requirements"]
                )
                resume_result = resume_editor.run()
                print(f"Resume customized and saved to: {resume_result['file_path']}")
                
                # Create cover letter
                cover_letter_editor = CoverLetterEditor(
                    template_path=template_path,
                    job_title=job["title"],
                    company_name=job["company"],
                    key_requirements=analysis_data["key_requirements"]
                )
                cover_letter_result = cover_letter_editor.run()
                print(f"Cover letter created and saved to: {cover_letter_result['file_path']}")
                
                # Send application email
                email_sender = EmailSender(
                    recipient_email=job.get("apply_email", "south.lake.union.cougar@gmail.com"),
                    subject=f"Application for {job['title']} position at {job['company']}",
                    body="",  # Body will be generated by EmailSender
                    attachments=[resume_result['file_path'], cover_letter_result['file_path']],
                    job_title=job['title'],
                    company_name=job['company'],
                    apply_link=job.get('apply_link', '')
                )
                email_result = email_sender.run()
                print(f"Application email result: {email_result}")
                
                # Removed break statement to process all matching jobs
    else:
        print(f"Error in job search: {search_results['message']}")

if __name__ == "__main__":
    # Run the test workflow
    test_full_workflow() 